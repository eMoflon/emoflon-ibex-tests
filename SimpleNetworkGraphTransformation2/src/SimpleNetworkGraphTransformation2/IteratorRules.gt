import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/SimpleNetwork/model/SimpleNetwork.ecore"

rule moveAllDevices {
	oldNetwork : Network {
		forEach devices->dev {
			-- oldNetwork-devices->dev
			++ newNetwork-devices->dev
			newNetwork.deviceNumber := newNetwork.deviceNumber + 1
			oldNetwork.deviceNumber := oldNetwork.deviceNumber - 1
		}     
	}
	# oldNetwork.deviceNumber  == 3
	newNetwork : Network
}

// Bug: This pattern in combination with the NAC does not work with Democles
rule moveAllDevices2 {
	oldNetwork : Network {
		forEach devices->dev {
			-- oldNetwork-devices->dev
			++ network-devices->dev
			network.deviceNumber := network.deviceNumber + 1
			oldNetwork.deviceNumber := oldNetwork.deviceNumber - 1
		}
	}
	
	network : Network
} when deviceNotInNetwork

rule moveAllComputers {
	oldNetwork : Network {
		forEach devices->dev <Computer> {
			-- oldNetwork-devices->dev
			++ network-devices->dev
			network.deviceNumber := network.deviceNumber + 1
			oldNetwork.deviceNumber := oldNetwork.deviceNumber - 1
			iterator::dev.CPU_Cores := 4
		}     
	}
	network : Network
} when computerNotInNetwork

rule moveAllServers {
	oldNetwork : Network {
		forEach devices->dev <Server> {
			-- oldNetwork-devices->dev
			++ network-devices->dev
			network.deviceNumber := network.deviceNumber + 1
			oldNetwork.deviceNumber := oldNetwork.deviceNumber - 1
			iterator::dev.CPU_Sockets := 4
		}     
	}
	network : Network
} when serverNotInNetwork

rule simpleConnect{
	network: Network{
		++ -connections -> newConnection
	}
	
	from: Device
	
	to: Device
	
	++ newConnection: Connection{
		++ -devices ->from
		++ -devices ->to
	}
} when notConnected

pattern findConnected() {
	from: Device
	
	to: Device
	
	connection: Connection {
		-devices -> from
		-devices -> to
	}
}

condition notConnected = forbid findConnected

// Bug: This pattern in combination with the NAC does not work with Democles
rule moveAllConnections {
	oldNetwork : Network {
		forEach connections->con {
			-- oldNetwork-connections->con
			++ network-connections->con
		}     
	}
	network : Network
} when noConnection

condition noConnection = forbid findConnection

pattern findConnection{
	network : Network {
		-connections->connection
	}
	
	connection : Connection
}

rule isolateDevice {
	device : Device {
		forEach connections-> con {
			-- device-connections->con
		}
	}
	
	connection : Connection {
		-devices->device
	}
}

rule removeDanglingConnection {
	network : Network {
		-- -connections->connection
	}
	-- connection : Connection
} when notConnected

pattern findIsolated() {
	from: Device
} when notConnected
