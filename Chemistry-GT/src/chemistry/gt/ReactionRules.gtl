package chemistry.gt
import "platform:/resource/SimpleChemistry/model/SimpleChemistry.ecore"

pattern findConnectedH{
	[=] h:H {
		[=] - connections -> atom
	}
	[=] atom:Atom
};

pattern findConnectedO{
	[=] o:O {
		[=] - connections -> atom
	}
	[=] atom:Atom
};

pattern findFreeAtoms{
	[=] h:H
	[=] o:O
	
	forbid(findConnectedH)[h=h]
	forbid(findConnectedO)[o=o]
};

pattern notDisjunctfindFreeAtoms{
	[=] h:H
	[=] o:O
	
	forbid(findConnectedH)[h=h]
	forbid(findConnectedO)[o=o]
};

rule simpleBind{
	[=] h:H{
		[+] -connections -> o
	}
	[=] o:O{
		[+] -connections -> h
	}
	
	forbid(findConnectedH)[h=h]
	forbid(findConnectedO)[o=o]
};

rule notDisjunctsimpleBind{
	[=] h:H{
		[+] -connections -> o
	}
	[=] o:O{
		[+] -connections -> h
	}
	
	forbid(findConnectedH)[h=h]
	forbid(findConnectedO)[o=o]
};

rule createH2{
	[=] h1:H{
		[+] -connections -> h2
	}
	[=] h2:H{
		[+] -connections -> h1
	}
	
	forbid(findConnectedH)[h1=h]
	forbid(findConnectedH)[h2=h]
};

rule notDisjunctcreateH2{
	[=] h1:H{
		[+] -connections -> h2
	}
	[=] h2:H{
		[+] -connections -> h1
	}
	forbid(findConnectedH)[h1=h]
	forbid(findConnectedH)[h2=h]
};

rule destroyH2{
	[=] h1:H{
		[-] -connections -> h2
	}
	[=] h2:H{
		[-] -connections -> h1
	}
};

rule completeH20{
	[=] h1:H{
		[=] -connections -> o
	}
	[=] o:O{
		[=] -connections -> h1
		[+]-connections -> h2
	}
	[=] h2:H
	
	forbid(findConnectedH)[h2=h]
};

rule notDisjointcompleteH20{
	[=] h1:H{
		[=] -connections -> o
	}
	[=] o:O{
		[=] -connections -> h1
		[+]-connections -> h2
	}
	[=] h2:H
	
	forbid(findConnectedH)[h2=h]
};

pattern findTwoH{
	[=] h1:H
	[=] h2:H
};

pattern notDisjunctfindTwoH{
	[=] h1:H
	[=] h2:H
};

pattern findThreeH{
	[=] h1: H
	[=] h2: H
	[=] h3: H
};

pattern notDisjunctfindThreeH{
	[=] h1: H
	[=] h2: H
	[=] h3: H
};

pattern findTwoHAndO{
	[=] h1: H
	[=] h2: H
	[=] o1: O
	[=] o2: O
};

pattern notDisjunctfindTwoHAndO{
	[=] h1: H
	[=] h2: H
	[=] o1: O
	[=] o2: O
};
rule destroyH3{
	[=] h1: H{
		[-] -connections ->h2
		[-] -connections ->h3
	}
	[=] h2: H{
		[-] -connections ->h1
		[-] -connections ->h3
	}
	[=] h3: H{
		[-] -connections ->h2
		[-] -connections ->h1
	}
};

rule createH3{
	[=] h1: H{
		[+] -connections ->h2
		[+] -connections ->h3
	}
	[=] h2: H{
		[+] -connections ->h1
		[+] -connections ->h3
	}
	[=] h3: H{
		[+] -connections ->h2
		[+] -connections ->h1
	}
	
	forbid(findConnectedH)[h1=h]
	forbid(findConnectedH)[h2=h]
	forbid(findConnectedH)[h3=h]
};

rule notDisjunctCreateH3{
	[=] h1: H{
		[+] -connections ->h2
		[+] -connections ->h3
	}
	[=] h2: H{
		[+] -connections ->h1
		[+] -connections ->h3
	}
	[=] h3: H{
		[+] -connections ->h2
		[+] -connections ->h1
	}
	
	forbid(findConnectedH)[h1=h]
	forbid(findConnectedH)[h2=h]
	forbid(findConnectedH)[h3=h]
};