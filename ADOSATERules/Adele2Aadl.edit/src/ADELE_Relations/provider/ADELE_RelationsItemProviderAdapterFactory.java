/**
 */
package ADELE_Relations.provider;

import ADELE_Relations.util.ADELE_RelationsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ADELE_RelationsItemProviderAdapterFactory extends ADELE_RelationsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ADELE_RelationsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.BusAccessConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusAccessConnectionItemProvider busAccessConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.BusAccessConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusAccessConnectionAdapter() {
		if (busAccessConnectionItemProvider == null) {
			busAccessConnectionItemProvider = new BusAccessConnectionItemProvider(this);
		}

		return busAccessConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.DataAccessConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAccessConnectionItemProvider dataAccessConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.DataAccessConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAccessConnectionAdapter() {
		if (dataAccessConnectionItemProvider == null) {
			dataAccessConnectionItemProvider = new DataAccessConnectionItemProvider(this);
		}

		return dataAccessConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.SubprogramAccessConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubprogramAccessConnectionItemProvider subprogramAccessConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.SubprogramAccessConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubprogramAccessConnectionAdapter() {
		if (subprogramAccessConnectionItemProvider == null) {
			subprogramAccessConnectionItemProvider = new SubprogramAccessConnectionItemProvider(this);
		}

		return subprogramAccessConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.SubprogramGroupAccessConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubprogramGroupAccessConnectionItemProvider subprogramGroupAccessConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.SubprogramGroupAccessConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubprogramGroupAccessConnectionAdapter() {
		if (subprogramGroupAccessConnectionItemProvider == null) {
			subprogramGroupAccessConnectionItemProvider = new SubprogramGroupAccessConnectionItemProvider(this);
		}

		return subprogramGroupAccessConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.EventPortConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventPortConnectionItemProvider eventPortConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.EventPortConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventPortConnectionAdapter() {
		if (eventPortConnectionItemProvider == null) {
			eventPortConnectionItemProvider = new EventPortConnectionItemProvider(this);
		}

		return eventPortConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.DataPortConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataPortConnectionItemProvider dataPortConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.DataPortConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataPortConnectionAdapter() {
		if (dataPortConnectionItemProvider == null) {
			dataPortConnectionItemProvider = new DataPortConnectionItemProvider(this);
		}

		return dataPortConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.EventDataPortConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventDataPortConnectionItemProvider eventDataPortConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.EventDataPortConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventDataPortConnectionAdapter() {
		if (eventDataPortConnectionItemProvider == null) {
			eventDataPortConnectionItemProvider = new EventDataPortConnectionItemProvider(this);
		}

		return eventDataPortConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.ParameterConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterConnectionItemProvider parameterConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.ParameterConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterConnectionAdapter() {
		if (parameterConnectionItemProvider == null) {
			parameterConnectionItemProvider = new ParameterConnectionItemProvider(this);
		}

		return parameterConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.AbstractFeatureConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractFeatureConnectionItemProvider abstractFeatureConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.AbstractFeatureConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractFeatureConnectionAdapter() {
		if (abstractFeatureConnectionItemProvider == null) {
			abstractFeatureConnectionItemProvider = new AbstractFeatureConnectionItemProvider(this);
		}

		return abstractFeatureConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ADELE_Relations.FeatureGroupConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureGroupConnectionItemProvider featureGroupConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ADELE_Relations.FeatureGroupConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureGroupConnectionAdapter() {
		if (featureGroupConnectionItemProvider == null) {
			featureGroupConnectionItemProvider = new FeatureGroupConnectionItemProvider(this);
		}

		return featureGroupConnectionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
