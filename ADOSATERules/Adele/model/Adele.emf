@GenModel(documentation="TODO: Add documentation for Blup")
@namespace(uri="platform:/resource/Adele/model/Adele.ecore", prefix="Adele")
package Adele;
class Component {
	attr EString description;
	val Access[*] adeleAccess;
	val Access[*] allRealFeatures; 
	val Component[*] type;
	val Component[*] allRealChildrenComponents;
	// val Component[*] tobecreated rule:ruleComponent2componentImplementation.tggdiag
	val Component[*] refines;
	val Component[*] refinedSubcomponent;
	val Component[*] implementation;
	val AccessConnection[*] allRealRelations;
    val DirectedFeature[*] features;
    val DirectedFeature[*] allRealFeaturesDf;//*
    val DirectedFeatureConnection[*] allRealRelationsDfc; //*
    val FeatureGroup[*] allRealFeaturesFg;//* 
    }

class Access {
	attr EString nameVar;
	attr EString directionView;
	val Feature[*] refinedFeature;
	val Component[*] classifier;
}

class Feature{
	attr EString nameVar;
}

class AccessConnection
{
val Component[*] originalSinkSubcomponent;
val Component[*] originalSourceSubcomponent;
val Access[*] originalSourceFeature;
val Access[*] orginialSinkFeature;
	
}
class Package{
	val Component[*] component;
	val FeatureGroup[*] children;

}
class DirectedFeature{
	
val Feature[*] refinedFeature;
val SKComponent[*] classifier;
val FeatureGroup[*] classifierFg; //*
}
class SKComponent{
	

}
class DirectedFeatureConnection{
	val DirectedFeature[*] originalSourceFeature;
	val DirectedFeature[*] originalSinkFeature;
}
class FeatureGroup{
	val DirectedFeature[*] allRealFeatures;
	val FeatureGroup[*] classifier; //check in tgg ruleDirFeatConn2dirFeatConnSrcParentFeatGroupDestSubcomp.tggdiag
    val FeatureGroup[*] inverseFeature;
    val Access[*] features;
    val DirectedFeature[*] featuresDf; 
     val FeatureGroup[*] refinedFeature;
}