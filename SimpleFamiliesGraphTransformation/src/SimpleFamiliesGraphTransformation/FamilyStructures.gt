import "platform:/resource/SimpleFamilies/model/SimpleFamilies.ecore"

/**
 * Finds a family with the father named as his son (one of his sons).
 */
pattern findFatherAndSonWithSameName() {
	family: Family {
		-father -> father
		-sons -> son
	}

	father: FamilyMember

	son: FamilyMember
	son.name == father.name
}

/**
 * Finds a child.
 */
abstract pattern findChild {
	family: Family

	child: FamilyMember
}

/**
 * Finds any daughters.
 */
abstract pattern findDaughterInFamily
refines findChild {
	family: Family {
		-daughters -> child
	}
}

/**
 * Finds any sons.
 */
abstract pattern findSonInFamily
refines findChild {
	family: Family {
		-sons -> child
	}
}

/**
 * Finds a child who has no parents in its family.
 */
pattern findOrphan
refines findChild
when daughterHasNoParent || sonHasNoParent

condition daughterHasNoParent = childIsDaugher && memberIsNoParent

condition sonHasNoParent = childIsSon && memberIsNoParent

condition childIsDaugher = enforce findDaughterInFamily

condition childIsSon = enforce findSonInFamily

condition memberIsNoParent = memberIsNoMother && memberIsNoFather

condition memberIsNoMother = forbid findMother

condition memberIsNoFather = forbid findFather

/**
 * Finds a child with just one parent in its family.
 */
pattern findHalfOrphan
refines findChild
when childIsDaughterWithSingleFather
  || childIsDaughterWithSingleMother
  || childIsSonWithSingleFather
  || childIsSonWithSingleMother

condition childIsDaughterWithSingleFather = childIsDaugher && memberIsSingleFather

condition childIsDaughterWithSingleMother = childIsDaugher && memberIsSingleMother

condition childIsSonWithSingleFather = childIsSon && memberIsSingleFather

condition childIsSonWithSingleMother = childIsSon && memberIsSingleMother

condition memberIsSingleFather = memberIsFather && memberIsNoMother

condition memberIsSingleMother = memberIsMother && memberIsNoFather

condition memberIsFather = enforce findFather

condition memberIsMother = enforce findMother

/**
 * Finds a child who have both a father and a mother in its family.
 */
pattern findChildrenWithTwoParents
refines findChild
when daughterHasTwoParents || sonHasTwoParents

condition daughterHasTwoParents = childIsDaugher && twoParents

condition sonHasTwoParents = childIsSon && twoParents

condition twoParents = memberIsMother && memberIsFather

/**
 * Finds a parent.
 */
abstract pattern findParent {
	family: Family

	parent: FamilyMember
}

/**
 * Finds any father.
 */
abstract pattern findFatherInFamily
refines findParent {
	family: Family {
		-father -> parent
	}
}

/**
 * Finds any mother.
 */
abstract pattern findMotherInFamily
refines findParent {
	family: Family {
		-mother -> parent
	}
}

/**
 * Finds a single father.
 */
pattern findSingleFather
refines findParent
when fatherIsSingleFatherOfDaughter || fatherIsSingleFatherOfSon

condition fatherIsSingleFatherOfDaughter = parentIsSingleFather && childIsDaugher

condition fatherIsSingleFatherOfSon = parentIsSingleFather && childIsSon

condition parentIsSingleFather = enforce findFatherInFamily && memberIsNoMother

/**
 * Finds a single mother.
 */
pattern findSingleMother
refines findParent
when motherIsSingleMotherOfDaughter || motherIsSingleMotherOfSon

condition motherIsSingleMotherOfDaughter = parentIsSingleMother && childIsDaugher

condition motherIsSingleMotherOfSon = parentIsSingleMother && childIsSon

condition parentIsSingleMother = enforce findMotherInFamily && memberIsNoFather

/**
 * Finds a single parent (father or mother).
 */
pattern findSingleParent
refines findParent
when fatherIsSingleFatherOfDaughter
  || fatherIsSingleFatherOfSon
  || motherIsSingleMotherOfDaughter
  || motherIsSingleMotherOfSon
