import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/SimpleFamilies/model/SimpleFamilies.ecore"

/**
 * Creates a family with the given name.
 */
rule createFamily(name: EString)
refines createUnnamedFamily {
	++ family: Family {
		.name := param::name
	}
}

/**
 * Creates a family without a name.
 */
rule createUnnamedFamily {
	register: FamilyRegister {
		++ -families -> family
	}

	++ family: Family
}

/**
 * Creates a family named "Miller".
 */
rule createMillerFamily
refines createUnnamedFamily {
	++ family: Family {
		.name := "Miller"
	}
}

/**
 * Deletes the matched family.
 */
rule deleteFamily {
	register: FamilyRegister {
		-- -families -> family
	}

	-- family: Family
}

/**
 * Finds any family.
 */
pattern findFamily {
	register: FamilyRegister {
		-families -> family
	}

	family: Family
}

/**
 * Finds a family named Simpson.
 */
pattern findSimpsonFamily
refines findFamily {
	family: Family 
	family.name == "Simpson"
}

/**
 * Finds a family not named Simpson.
 */
pattern findFamilyButNotSimpson
refines findFamily {
	family: Family 
	family.name != "Simpson"
}

/**
 * Finds a family with a name lexicographically greater or equal than "Simpson".
 */
pattern findFamilyWithNameGreaterOrEqualThanSimpson
refines findFamily {
	family: Family 
	family.name >= "Simpson"
}

/**
 * Finds a family with a name lexicographically greater than "Simpson".
 */
pattern findFamilyWithNameGreaterThanSimpson
refines findFamily {
	family: Family 
	family.name > "Simpson"
}

/**
 * Finds a family with a name lexicographically smaller or equal than "Simpson".
 */
pattern findFamilyWithNameSmallerOrEqualThanSimpson
refines findFamily {
	family: Family
	family.name <= "Simpson"
}

/**
 * Finds a family with a name lexicographically smaller than "Simpson".
 */
pattern findFamilyWithNameSmallerThanSimpson
refines findFamily {
	family: Family
	family.name < "Simpson"
}

/**
 * Finds a family with the given name.
 */
pattern findFamilyByName(name: EString)
refines findFamily {
	family: Family
	family.name == param::name
}

/**
 * Finds a family not named as the given name.
 */
pattern findFamilyNotNamed(name: EString)
refines findFamily {
	family: Family
	family.name != param::name
}

/**
 * Finds a family with a name which is lexicographically greater the given name.
 */
pattern findFamilyWithNameGreaterThan(name: EString)
refines findFamily {
	family: Family
	family.name > param::name
}

/**
 * Finds a family with a name which is lexicographically greater than
 * or equal to the given name.
 */
pattern findFamilyWithNameGreaterOrEqualThan(name: EString)
refines findFamily {
	family: Family
	family.name >= param::name
}

/**
 * Finds a family with a name which is lexicographically smaller the given name.
 */
pattern findFamilyWithNameSmallerThan(name: EString)
refines findFamily {
	family: Family
	family.name < param::name
}

/**
 * Finds a family with a name which is lexicographically smaller than
 * or equal to the given name.
 */
pattern findFamilyWithNameSmallerOrEqualThan(name: EString)
refines findFamily {
	family: Family
	family.name <= param::name
}

/**
 * Renames a family.
 */
rule renameFamily(oldName: EString, newName: EString) {
	family: Family {
		.name := param::newName
	}
	family.name == param::oldName
}

/**
 * Find three families of the same name.
 */
pattern findThreeFamiliesOfTheSameName {
	family1: Family

	family2: Family
	family2.name == family1.name

	family3: Family
	family3.name == family1.name
}
