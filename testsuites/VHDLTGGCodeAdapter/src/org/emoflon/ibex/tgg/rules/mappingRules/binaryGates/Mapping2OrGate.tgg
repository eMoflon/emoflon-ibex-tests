#using VHDLTGGCodeAdapter.*
#using AttrCondDefLibrary.*

#rule Mapping2OrGate #extends AbstractBinaryMappingRule #with VHDLTGGCodeAdapter

#source {
	++expressionNode:Node {
		name := "or"
	}
}

#target {
	++leftPort:InputPort {
		name := "OR.in1"
		++ - block->expression
	}
	++rightPort:InputPort {
		name := "OR.in2"
		++ - block->expression
	}
	++out:OutputPort {
		name := "OR.out"
		++ - block->expression
	}
	++expression:OrGate {
		++ - inputport1->leftPort
		++ - outputport->out
		++ - inputs->rightPort
		++ - inputport2->rightPort
		++ - inputs->leftPort
	}
}

#correspondence {
	++ orNode2Gate :NodeToBlock {
		#src->expressionNode
		#trg->expression
	}
}

#nac NoOtherInLeftForOrGate #for Mapping2OrGate   

#target {
	noIn:Port {
		- src->leftExtern
	}
	
	leftExtern:InputPort
}

#nac NoOtherInRightForOrGate #for Mapping2OrGate

#target {
	noInRight:Port {
		- src->rightExtern
	}
	
	rightExtern:InputPort
}