#using VHDLTGGCodeAdapter.*
#using AttrCondDefLibrary.*

#abstract #rule AbstractBinaryMappingRule #extends AbstractMappingRule #with VHDLTGGCodeAdapter

#source {
	++expressionNode:Node
	++left:Node {
		index := 0
		++ - parentNode->expressionNode
	}
	++right:Node {
		index := 1
		++ - parentNode->expressionNode
	}
	inNode2:Node {
		name == "in"
		- parentNode->inputPortNode2
	}
	inputPortNode2:Node {
		name == "PORT"
		- parentNode->entityNode
	}
	entityNode:Node {
		name == "ENTITY"
	}
}

#target {
//	!noInRight:Port {
//		- src->rightExtern
//	}
	++leftPort:InputPort {
		++ - src->leftExtern
	}
	compositeBlock:CompositeBlock {
		- inputs->rightExtern
		- inputs->leftExtern
	}
	++rightPort:InputPort {
		++ - src->rightExtern
	}
	rightExtern:InputPort
	leftExtern:InputPort
}

#correspondence {
	node2composite :NodeToCompositeBlock {
		#src->entityNode
		#trg->compositeBlock
	}
	node2inputPort2 :NodeToInputPort {
		#src->inputPortNode2
		#trg->rightExtern
	}
}

#attributeConditions {
	eq_string(leftExtern.name, left.name)
	eq_string(rightExtern.name, right.name)
}