/*
 * generated by Xtext 2.37.0
 */
package org.emoflon.express.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.emoflon.express.ide.contentassist.antlr.internal.InternalExpressParser;
import org.emoflon.express.services.ExpressGrammarAccess;

public class ExpressParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ExpressGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ExpressGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getReferenceOrValueAccess().getAlternatives(), "rule__ReferenceOrValue__Alternatives");
			builder.put(grammarAccess.getReferenceOrValueAccess().getValueAlternatives_1_0(), "rule__ReferenceOrValue__ValueAlternatives_1_0");
			builder.put(grammarAccess.getUserDefinedTypeAccess().getAlternatives(), "rule__UserDefinedType__Alternatives");
			builder.put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
			builder.put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
			builder.put(grammarAccess.getUseFromAccess().getGroup(), "rule__UseFrom__Group__0");
			builder.put(grammarAccess.getUseFromAccess().getGroup_3(), "rule__UseFrom__Group_3__0");
			builder.put(grammarAccess.getImportedEntityListAccess().getGroup(), "rule__ImportedEntityList__Group__0");
			builder.put(grammarAccess.getImportedEntityListAccess().getGroup_1(), "rule__ImportedEntityList__Group_1__0");
			builder.put(grammarAccess.getImportedEntityAccess().getGroup(), "rule__ImportedEntity__Group__0");
			builder.put(grammarAccess.getImportedEntityAccess().getGroup_1(), "rule__ImportedEntity__Group_1__0");
			builder.put(grammarAccess.getSelectTypeAccess().getGroup(), "rule__SelectType__Group__0");
			builder.put(grammarAccess.getEnumerationTypeAccess().getGroup(), "rule__EnumerationType__Group__0");
			builder.put(grammarAccess.getEnumerationTypeAccess().getGroup_7(), "rule__EnumerationType__Group_7__0");
			builder.put(grammarAccess.getAliasTypeAccess().getGroup(), "rule__AliasType__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_4(), "rule__Entity__Group_4__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_5(), "rule__Function__Group_5__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getUserDefinedTypeListAccess().getGroup(), "rule__UserDefinedTypeList__Group__0");
			builder.put(grammarAccess.getUserDefinedTypeListAccess().getGroup_1(), "rule__UserDefinedTypeList__Group_1__0");
			builder.put(grammarAccess.getIntegerAttributeAccess().getGroup(), "rule__IntegerAttribute__Group__0");
			builder.put(grammarAccess.getStringAttributeAccess().getGroup(), "rule__StringAttribute__Group__0");
			builder.put(grammarAccess.getRealAttributeAccess().getGroup(), "rule__RealAttribute__Group__0");
			builder.put(grammarAccess.getBooleanAttributeAccess().getGroup(), "rule__BooleanAttribute__Group__0");
			builder.put(grammarAccess.getReferenceAttributeAccess().getGroup(), "rule__ReferenceAttribute__Group__0");
			builder.put(grammarAccess.getSchemaContainerAccess().getSchemasAssignment(), "rule__SchemaContainer__SchemasAssignment");
			builder.put(grammarAccess.getSchemaAccess().getNameAssignment_1(), "rule__Schema__NameAssignment_1");
			builder.put(grammarAccess.getSchemaAccess().getDeclarationsAssignment_3(), "rule__Schema__DeclarationsAssignment_3");
			builder.put(grammarAccess.getReferenceOrValueAccess().getReferenceAssignment_0(), "rule__ReferenceOrValue__ReferenceAssignment_0");
			builder.put(grammarAccess.getReferenceOrValueAccess().getValueAssignment_1(), "rule__ReferenceOrValue__ValueAssignment_1");
			builder.put(grammarAccess.getUseFromAccess().getSchemaAssignment_2(), "rule__UseFrom__SchemaAssignment_2");
			builder.put(grammarAccess.getUseFromAccess().getImportedEntitiesAssignment_3_1(), "rule__UseFrom__ImportedEntitiesAssignment_3_1");
			builder.put(grammarAccess.getImportedEntityListAccess().getEntitiesAssignment_0(), "rule__ImportedEntityList__EntitiesAssignment_0");
			builder.put(grammarAccess.getImportedEntityListAccess().getEntitiesAssignment_1_1(), "rule__ImportedEntityList__EntitiesAssignment_1_1");
			builder.put(grammarAccess.getImportedEntityAccess().getEntityAssignment_0(), "rule__ImportedEntity__EntityAssignment_0");
			builder.put(grammarAccess.getImportedEntityAccess().getAliasAssignment_1_1(), "rule__ImportedEntity__AliasAssignment_1_1");
			builder.put(grammarAccess.getSelectTypeAccess().getNameAssignment_1(), "rule__SelectType__NameAssignment_1");
			builder.put(grammarAccess.getSelectTypeAccess().getTypesAssignment_5(), "rule__SelectType__TypesAssignment_5");
			builder.put(grammarAccess.getEnumerationTypeAccess().getNameAssignment_1(), "rule__EnumerationType__NameAssignment_1");
			builder.put(grammarAccess.getEnumerationTypeAccess().getValuesAssignment_6(), "rule__EnumerationType__ValuesAssignment_6");
			builder.put(grammarAccess.getEnumerationTypeAccess().getValuesAssignment_7_1(), "rule__EnumerationType__ValuesAssignment_7_1");
			builder.put(grammarAccess.getEnumerationValueAccess().getNameAssignment(), "rule__EnumerationValue__NameAssignment");
			builder.put(grammarAccess.getAliasTypeAccess().getNameAssignment_1(), "rule__AliasType__NameAssignment_1");
			builder.put(grammarAccess.getAliasTypeAccess().getElementAssignment_3(), "rule__AliasType__ElementAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getSubTypeAssignment_3_3(), "rule__Entity__SubTypeAssignment_3_3");
			builder.put(grammarAccess.getEntityAccess().getSuperTypeAssignment_4_3(), "rule__Entity__SuperTypeAssignment_4_3");
			builder.put(grammarAccess.getEntityAccess().getAttributesAssignment_5(), "rule__Entity__AttributesAssignment_5");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_3(), "rule__Function__ParametersAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_5_1(), "rule__Function__ReturnTypeAssignment_5_1");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_0(), "rule__ParameterList__ParametersAssignment_0");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_1_1(), "rule__ParameterList__ParametersAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getUserDefinedTypeListAccess().getElementsAssignment_0(), "rule__UserDefinedTypeList__ElementsAssignment_0");
			builder.put(grammarAccess.getUserDefinedTypeListAccess().getElementsAssignment_1_1(), "rule__UserDefinedTypeList__ElementsAssignment_1_1");
			builder.put(grammarAccess.getIntegerAttributeAccess().getNameAssignment_0(), "rule__IntegerAttribute__NameAssignment_0");
			builder.put(grammarAccess.getIntegerAttributeAccess().getOptionalAssignment_2(), "rule__IntegerAttribute__OptionalAssignment_2");
			builder.put(grammarAccess.getStringAttributeAccess().getNameAssignment_0(), "rule__StringAttribute__NameAssignment_0");
			builder.put(grammarAccess.getStringAttributeAccess().getOptionalAssignment_2(), "rule__StringAttribute__OptionalAssignment_2");
			builder.put(grammarAccess.getRealAttributeAccess().getNameAssignment_0(), "rule__RealAttribute__NameAssignment_0");
			builder.put(grammarAccess.getRealAttributeAccess().getOptionalAssignment_2(), "rule__RealAttribute__OptionalAssignment_2");
			builder.put(grammarAccess.getBooleanAttributeAccess().getNameAssignment_0(), "rule__BooleanAttribute__NameAssignment_0");
			builder.put(grammarAccess.getBooleanAttributeAccess().getOptionalAssignment_2(), "rule__BooleanAttribute__OptionalAssignment_2");
			builder.put(grammarAccess.getReferenceAttributeAccess().getNameAssignment_0(), "rule__ReferenceAttribute__NameAssignment_0");
			builder.put(grammarAccess.getReferenceAttributeAccess().getOptionalAssignment_2(), "rule__ReferenceAttribute__OptionalAssignment_2");
			builder.put(grammarAccess.getReferenceAttributeAccess().getReferenceAssignment_3(), "rule__ReferenceAttribute__ReferenceAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ExpressGrammarAccess grammarAccess;

	@Override
	protected InternalExpressParser createParser() {
		InternalExpressParser result = new InternalExpressParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExpressGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExpressGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
