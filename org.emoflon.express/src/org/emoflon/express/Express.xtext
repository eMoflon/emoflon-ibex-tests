grammar org.emoflon.express.Express with org.eclipse.xtext.common.Terminals

generate express "platform:/org.emoflon.express/model/generated/Express.ecore"

Schema:
	'SCHEMA' name=ID declarations+=Declaration* 'END_SCHEMA;';

Declaration:
	UserDefinedType | Function | UseFrom;

Type:
	UserDefinedTypeReference;

UserDefinedTypeReference:
	type=[UserDefinedType];

UserDefinedType:
	SelectType | EnumerationType | AliasType | Entity;

UseFrom:
	'USE' 'FROM' schema=[Schema] ('(' importedEntities=ImportedEntityList ')')?;

ImportedEntityList:
	entities+=ImportedEntity (',' entities+=ImportedEntity)*;

ImportedEntity:
	entity=[Entity] ('AS' alias=ID)?;

SelectType:
	'TYPE' name=ID '=' 'SELECT' '(' types=UserDefinedTypeList ');' 'END_TYPE;';

EnumerationType:
	'TYPE' name=ID '=' 'ENUMERATION' 'OF' '(' values+=EnumerationValue (',' values+=EnumerationValue)? ');' 'END_TYPE;';

EnumerationValue:
	name=ID;

AliasType:
	'TYPE' name=ID '=' (element=[UserDefinedType]) ';' 'END_TYPE;';

Entity:
	'ENTITY' name=ID (abstracct?='ABSTRACT')?
	('SUPERTYPE' 'OF' '(' subTypes+=[Entity] (',' subTypes+=[Entity])* ')')?
	('SUBTYPE' 'OF' '(' superTypes+=[Entity] ')')? ';'
	(attributes+=Attribute)*
	'END_ENTITY;';

Function:
	'FUNCTION' name=ID '(' (parameters=ParameterList)? ')' (':' (returnType=Type)) ';'
	'...'
	'END_FUNCTION;';

ParameterList:
	parameters+=Parameter (';' parameters+=Parameter)*;

Parameter:
	name=ID ':' (type=Type);

UserDefinedTypeList:
	(elements+=[UserDefinedType]) (',' (elements+=[UserDefinedType]))*;

Attribute:
	IntegerAttribute | StringAttribute | RealAttribute | BooleanAttribute | EntityAttribute;

IntegerAttribute:
	name=ID ':' (optional?='OPTIONAL')? 'INTEGER' ';';

StringAttribute:
	name=ID ':' (optional?='OPTIONAL')? 'STRING' ';';

RealAttribute:
	name=ID ':' (optional?='OPTIONAL')? 'REAL' ';';

BooleanAttribute:
	name=ID ':' (optional?='OPTIONAL')? 'BOOLEAN' ';';
	
EntityAttribute:
	name=ID ':' (optional?='OPTIONAL')? entity=[Entity] ';';

	/* 
GeneralizedTypes:  GeneralAggregationTypes; // AggregateType | GenericEntityType | GenericType
GeneralAggregationTypes: GeneralArrayType | GeneralBagType | GeneralListType | GeneralSetType ;
GeneralArrayType: 'ARRAY' (bounds=BoundSpec)? 'OF' type=ParameterType ;
GeneralBagType: 'BAG' (bounds=BoundSpec)? 'OF' type=ParameterType
;
GeneralListType: 'LIST' (bounds=BoundSpec)? 'OF' (unique?='UNIQUE')? type=ParameterType ;
GeneralSetType: 'SET' (bounds=BoundSpec)? 'OF' type=ParameterType ;
BoundSpec: '[' bound1=INT":" bound2=INT ']' ;

InstantiableType: AggregationTypes | SimpleTypes | NamedTypes ;
UnderlyingType: EnumerationType | SelectType | AggregationTypes | SimpleTypes | DeclaredType ;
AggregationTypes: ArrayType | BagType | ListType | SetType ; // Instantiable versions

ArrayType: 'ARRAY' (bounds=BoundSpec)? 'OF' (optional?='OPTIONAL')? (unique?='UNIQUE')? type=InstantiableType ;
BagType: 'BAG' (bounds=BoundSpec)? 'OF' type=InstantiableType;
ListType: 'LIST' (bounds=BoundSpec)? 'OF' (unique?='UNIQUE')? type=InstantiableType ;
SetType: 'SET' (bounds=BoundSpec)? 'OF' type=InstantiableType ;

EnumerationType: (extensible?='EXTENSIBLE')? 'ENUMERATION' (
	( 'OF' '(' items+=SimpleId ( "," items+=SimpleId )* ')' ) | 
	'BASED_ON' baseType=[TypeDecl|SimpleId] ( 'WITH' '(' items+=SimpleId ( "," items+=SimpleId )* ')' )?
)?;

SelectType: (extensible?='EXTENSIBLE')? 'SELECT' (
	'(' types+=NamedTypes ( ',' types+=NamedTypes)* ')' |
	'BASED_ON' baseType=DeclaredType ('WITH' '(' types+=NamedTypes ( ',' types+=NamedTypes)* ')')?  
)? ;
*/

