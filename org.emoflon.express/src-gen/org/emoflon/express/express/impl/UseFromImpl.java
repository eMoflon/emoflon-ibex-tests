/**
 * generated by Xtext 2.37.0
 */
package org.emoflon.express.express.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.emoflon.express.express.ExpressPackage;
import org.emoflon.express.express.ImportedEntityList;
import org.emoflon.express.express.Schema;
import org.emoflon.express.express.UseFrom;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Use From</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.express.express.impl.UseFromImpl#getSchema <em>Schema</em>}</li>
 *   <li>{@link org.emoflon.express.express.impl.UseFromImpl#getImportedEntities <em>Imported Entities</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UseFromImpl extends DeclarationImpl implements UseFrom
{
  /**
   * The cached value of the '{@link #getSchema() <em>Schema</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchema()
   * @generated
   * @ordered
   */
  protected Schema schema;

  /**
   * The cached value of the '{@link #getImportedEntities() <em>Imported Entities</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportedEntities()
   * @generated
   * @ordered
   */
  protected ImportedEntityList importedEntities;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseFromImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExpressPackage.Literals.USE_FROM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Schema getSchema()
  {
    if (schema != null && schema.eIsProxy())
    {
      InternalEObject oldSchema = (InternalEObject)schema;
      schema = (Schema)eResolveProxy(oldSchema);
      if (schema != oldSchema)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ExpressPackage.USE_FROM__SCHEMA, oldSchema, schema));
      }
    }
    return schema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Schema basicGetSchema()
  {
    return schema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSchema(Schema newSchema)
  {
    Schema oldSchema = schema;
    schema = newSchema;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpressPackage.USE_FROM__SCHEMA, oldSchema, schema));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportedEntityList getImportedEntities()
  {
    return importedEntities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImportedEntities(ImportedEntityList newImportedEntities, NotificationChain msgs)
  {
    ImportedEntityList oldImportedEntities = importedEntities;
    importedEntities = newImportedEntities;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExpressPackage.USE_FROM__IMPORTED_ENTITIES, oldImportedEntities, newImportedEntities);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImportedEntities(ImportedEntityList newImportedEntities)
  {
    if (newImportedEntities != importedEntities)
    {
      NotificationChain msgs = null;
      if (importedEntities != null)
        msgs = ((InternalEObject)importedEntities).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExpressPackage.USE_FROM__IMPORTED_ENTITIES, null, msgs);
      if (newImportedEntities != null)
        msgs = ((InternalEObject)newImportedEntities).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ExpressPackage.USE_FROM__IMPORTED_ENTITIES, null, msgs);
      msgs = basicSetImportedEntities(newImportedEntities, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExpressPackage.USE_FROM__IMPORTED_ENTITIES, newImportedEntities, newImportedEntities));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExpressPackage.USE_FROM__IMPORTED_ENTITIES:
        return basicSetImportedEntities(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExpressPackage.USE_FROM__SCHEMA:
        if (resolve) return getSchema();
        return basicGetSchema();
      case ExpressPackage.USE_FROM__IMPORTED_ENTITIES:
        return getImportedEntities();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExpressPackage.USE_FROM__SCHEMA:
        setSchema((Schema)newValue);
        return;
      case ExpressPackage.USE_FROM__IMPORTED_ENTITIES:
        setImportedEntities((ImportedEntityList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExpressPackage.USE_FROM__SCHEMA:
        setSchema((Schema)null);
        return;
      case ExpressPackage.USE_FROM__IMPORTED_ENTITIES:
        setImportedEntities((ImportedEntityList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExpressPackage.USE_FROM__SCHEMA:
        return schema != null;
      case ExpressPackage.USE_FROM__IMPORTED_ENTITIES:
        return importedEntities != null;
    }
    return super.eIsSet(featureID);
  }

} //UseFromImpl
