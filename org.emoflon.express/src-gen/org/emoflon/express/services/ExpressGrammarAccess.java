/*
 * generated by Xtext 2.28.0
 */
package org.emoflon.express.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpressGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SchemaContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.SchemaContainer");
		private final Assignment cSchemasAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSchemasSchemaParserRuleCall_0 = (RuleCall)cSchemasAssignment.eContents().get(0);
		
		//SchemaContainer:
		//    schemas+=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//schemas+=Schema
		public Assignment getSchemasAssignment() { return cSchemasAssignment; }
		
		//Schema
		public RuleCall getSchemasSchemaParserRuleCall_0() { return cSchemasSchemaParserRuleCall_0; }
	}
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSCHEMAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cEND_SCHEMAKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Schema:
		//    'SCHEMA' name=ID ';' declarations+=Declaration* 'END_SCHEMA;';
		@Override public ParserRule getRule() { return rule; }
		
		//'SCHEMA' name=ID ';' declarations+=Declaration* 'END_SCHEMA;'
		public Group getGroup() { return cGroup; }
		
		//'SCHEMA'
		public Keyword getSCHEMAKeyword_0() { return cSCHEMAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//'END_SCHEMA;'
		public Keyword getEND_SCHEMAKeyword_4() { return cEND_SCHEMAKeyword_4; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserDefinedTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUseFromParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//    UserDefinedType | Function | UseFrom;
		@Override public ParserRule getRule() { return rule; }
		
		//UserDefinedType | Function | UseFrom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UserDefinedType
		public RuleCall getUserDefinedTypeParserRuleCall_0() { return cUserDefinedTypeParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
		
		//UseFrom
		public RuleCall getUseFromParserRuleCall_2() { return cUseFromParserRuleCall_2; }
	}
	public class ReferenceOrValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.ReferenceOrValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReferenceUserDefinedTypeCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceUserDefinedTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceUserDefinedTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueINTEGERKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueBOOLEANKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cValueSTRINGKeyword_1_0_2 = (Keyword)cValueAlternatives_1_0.eContents().get(2);
		
		//ReferenceOrValue:
		//    reference=[UserDefinedType] | value=('INTEGER' | 'BOOLEAN' | 'STRING');
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[UserDefinedType] | value=('INTEGER' | 'BOOLEAN' | 'STRING')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//reference=[UserDefinedType]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//[UserDefinedType]
		public CrossReference getReferenceUserDefinedTypeCrossReference_0_0() { return cReferenceUserDefinedTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getReferenceUserDefinedTypeIDTerminalRuleCall_0_0_1() { return cReferenceUserDefinedTypeIDTerminalRuleCall_0_0_1; }
		
		//value=('INTEGER' | 'BOOLEAN' | 'STRING')
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('INTEGER' | 'BOOLEAN' | 'STRING')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'INTEGER'
		public Keyword getValueINTEGERKeyword_1_0_0() { return cValueINTEGERKeyword_1_0_0; }
		
		//'BOOLEAN'
		public Keyword getValueBOOLEANKeyword_1_0_1() { return cValueBOOLEANKeyword_1_0_1; }
		
		//'STRING'
		public Keyword getValueSTRINGKeyword_1_0_2() { return cValueSTRINGKeyword_1_0_2; }
	}
	public class UserDefinedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.UserDefinedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAliasTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEntityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UserDefinedType:
		//    SelectType | EnumerationType | AliasType | Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//SelectType | EnumerationType | AliasType | Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SelectType
		public RuleCall getSelectTypeParserRuleCall_0() { return cSelectTypeParserRuleCall_0; }
		
		//EnumerationType
		public RuleCall getEnumerationTypeParserRuleCall_1() { return cEnumerationTypeParserRuleCall_1; }
		
		//AliasType
		public RuleCall getAliasTypeParserRuleCall_2() { return cAliasTypeParserRuleCall_2; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_3() { return cEntityParserRuleCall_3; }
	}
	public class UseFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.UseFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFROMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSchemaSchemaCrossReference_2_0 = (CrossReference)cSchemaAssignment_2.eContents().get(0);
		private final RuleCall cSchemaSchemaIDTerminalRuleCall_2_0_1 = (RuleCall)cSchemaSchemaCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportedEntitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImportedEntitiesImportedEntityListParserRuleCall_3_1_0 = (RuleCall)cImportedEntitiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//UseFrom:
		//    'USE' 'FROM' schema=[Schema] ('(' importedEntities=ImportedEntityList ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'USE' 'FROM' schema=[Schema] ('(' importedEntities=ImportedEntityList ')')?
		public Group getGroup() { return cGroup; }
		
		//'USE'
		public Keyword getUSEKeyword_0() { return cUSEKeyword_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_1() { return cFROMKeyword_1; }
		
		//schema=[Schema]
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//[Schema]
		public CrossReference getSchemaSchemaCrossReference_2_0() { return cSchemaSchemaCrossReference_2_0; }
		
		//ID
		public RuleCall getSchemaSchemaIDTerminalRuleCall_2_0_1() { return cSchemaSchemaIDTerminalRuleCall_2_0_1; }
		
		//('(' importedEntities=ImportedEntityList ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//importedEntities=ImportedEntityList
		public Assignment getImportedEntitiesAssignment_3_1() { return cImportedEntitiesAssignment_3_1; }
		
		//ImportedEntityList
		public RuleCall getImportedEntitiesImportedEntityListParserRuleCall_3_1_0() { return cImportedEntitiesImportedEntityListParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ImportedEntityListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.ImportedEntityList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitiesImportedEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEntitiesImportedEntityParserRuleCall_1_1_0 = (RuleCall)cEntitiesAssignment_1_1.eContents().get(0);
		
		//ImportedEntityList:
		//    entities+=ImportedEntity (',' entities+=ImportedEntity)*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=ImportedEntity (',' entities+=ImportedEntity)*
		public Group getGroup() { return cGroup; }
		
		//entities+=ImportedEntity
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }
		
		//ImportedEntity
		public RuleCall getEntitiesImportedEntityParserRuleCall_0_0() { return cEntitiesImportedEntityParserRuleCall_0_0; }
		
		//(',' entities+=ImportedEntity)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//entities+=ImportedEntity
		public Assignment getEntitiesAssignment_1_1() { return cEntitiesAssignment_1_1; }
		
		//ImportedEntity
		public RuleCall getEntitiesImportedEntityParserRuleCall_1_1_0() { return cEntitiesImportedEntityParserRuleCall_1_1_0; }
	}
	public class ImportedEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.ImportedEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEntityEntityCrossReference_0_0 = (CrossReference)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityEntityCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//ImportedEntity:
		//    entity=[Entity] ('AS' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//entity=[Entity] ('AS' alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_0_0() { return cEntityEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_0_1() { return cEntityEntityIDTerminalRuleCall_0_0_1; }
		
		//('AS' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AS'
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
	}
	public class SelectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.SelectType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTYPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSELECTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypesUserDefinedTypeListParserRuleCall_5_0 = (RuleCall)cTypesAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEND_TYPEKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SelectType:
		//    'TYPE' name=ID '=' 'SELECT' '(' types=UserDefinedTypeList ');' 'END_TYPE;';
		@Override public ParserRule getRule() { return rule; }
		
		//'TYPE' name=ID '=' 'SELECT' '(' types=UserDefinedTypeList ');' 'END_TYPE;'
		public Group getGroup() { return cGroup; }
		
		//'TYPE'
		public Keyword getTYPEKeyword_0() { return cTYPEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_3() { return cSELECTKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//types=UserDefinedTypeList
		public Assignment getTypesAssignment_5() { return cTypesAssignment_5; }
		
		//UserDefinedTypeList
		public RuleCall getTypesUserDefinedTypeListParserRuleCall_5_0() { return cTypesUserDefinedTypeListParserRuleCall_5_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_6() { return cRightParenthesisSemicolonKeyword_6; }
		
		//'END_TYPE;'
		public Keyword getEND_TYPEKeyword_7() { return cEND_TYPEKeyword_7; }
	}
	public class EnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.EnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTYPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cENUMERATIONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOFKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesEnumerationValueParserRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cValuesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValuesEnumerationValueParserRuleCall_7_1_0 = (RuleCall)cValuesAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEND_TYPEKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EnumerationType:
		//    'TYPE' name=ID '=' 'ENUMERATION' 'OF' '(' values+=EnumerationValue (',' values+=EnumerationValue)? ');' 'END_TYPE;';
		@Override public ParserRule getRule() { return rule; }
		
		//'TYPE' name=ID '=' 'ENUMERATION' 'OF' '(' values+=EnumerationValue (',' values+=EnumerationValue)? ');' 'END_TYPE;'
		public Group getGroup() { return cGroup; }
		
		//'TYPE'
		public Keyword getTYPEKeyword_0() { return cTYPEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'ENUMERATION'
		public Keyword getENUMERATIONKeyword_3() { return cENUMERATIONKeyword_3; }
		
		//'OF'
		public Keyword getOFKeyword_4() { return cOFKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//values+=EnumerationValue
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }
		
		//EnumerationValue
		public RuleCall getValuesEnumerationValueParserRuleCall_6_0() { return cValuesEnumerationValueParserRuleCall_6_0; }
		
		//(',' values+=EnumerationValue)?
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//values+=EnumerationValue
		public Assignment getValuesAssignment_7_1() { return cValuesAssignment_7_1; }
		
		//EnumerationValue
		public RuleCall getValuesEnumerationValueParserRuleCall_7_1_0() { return cValuesEnumerationValueParserRuleCall_7_1_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }
		
		//'END_TYPE;'
		public Keyword getEND_TYPEKeyword_9() { return cEND_TYPEKeyword_9; }
	}
	public class EnumerationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.EnumerationValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationValue:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AliasTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.AliasType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTYPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cElementUserDefinedTypeCrossReference_3_0 = (CrossReference)cElementAssignment_3.eContents().get(0);
		private final RuleCall cElementUserDefinedTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cElementUserDefinedTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEND_TYPEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AliasType:
		//    'TYPE' name=ID '=' (element=[UserDefinedType]) ';' 'END_TYPE;';
		@Override public ParserRule getRule() { return rule; }
		
		//'TYPE' name=ID '=' (element=[UserDefinedType]) ';' 'END_TYPE;'
		public Group getGroup() { return cGroup; }
		
		//'TYPE'
		public Keyword getTYPEKeyword_0() { return cTYPEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//(element=[UserDefinedType])
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//[UserDefinedType]
		public CrossReference getElementUserDefinedTypeCrossReference_3_0() { return cElementUserDefinedTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getElementUserDefinedTypeIDTerminalRuleCall_3_0_1() { return cElementUserDefinedTypeIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'END_TYPE;'
		public Keyword getEND_TYPEKeyword_5() { return cEND_TYPEKeyword_5; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENTITYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSUPERTYPEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cOFKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSubTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cSubTypeEntityCrossReference_3_3_0 = (CrossReference)cSubTypeAssignment_3_3.eContents().get(0);
		private final RuleCall cSubTypeEntityIDTerminalRuleCall_3_3_0_1 = (RuleCall)cSubTypeEntityCrossReference_3_3_0.eContents().get(1);
		private final Keyword cRightParenthesisSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSUBTYPEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cOFKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cSuperTypeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cSuperTypeEntityCrossReference_4_3_0 = (CrossReference)cSuperTypeAssignment_4_3.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_4_3_0_1 = (RuleCall)cSuperTypeEntityCrossReference_4_3_0.eContents().get(1);
		private final Keyword cRightParenthesisSemicolonKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cEND_ENTITYKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//    'ENTITY' name=ID';'
		//    ('SUPERTYPE' 'OF' '(' subType=[Entity]');')?
		//    ('SUBTYPE' 'OF' '(' superType=[Entity] ');')?
		//    (attributes+=Attribute)*
		//    'END_ENTITY;';
		@Override public ParserRule getRule() { return rule; }
		
		//'ENTITY' name=ID';'
		//('SUPERTYPE' 'OF' '(' subType=[Entity]');')?
		//('SUBTYPE' 'OF' '(' superType=[Entity] ');')?
		//(attributes+=Attribute)*
		//'END_ENTITY;'
		public Group getGroup() { return cGroup; }
		
		//'ENTITY'
		public Keyword getENTITYKeyword_0() { return cENTITYKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//('SUPERTYPE' 'OF' '(' subType=[Entity]');')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'SUPERTYPE'
		public Keyword getSUPERTYPEKeyword_3_0() { return cSUPERTYPEKeyword_3_0; }
		
		//'OF'
		public Keyword getOFKeyword_3_1() { return cOFKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//subType=[Entity]
		public Assignment getSubTypeAssignment_3_3() { return cSubTypeAssignment_3_3; }
		
		//[Entity]
		public CrossReference getSubTypeEntityCrossReference_3_3_0() { return cSubTypeEntityCrossReference_3_3_0; }
		
		//ID
		public RuleCall getSubTypeEntityIDTerminalRuleCall_3_3_0_1() { return cSubTypeEntityIDTerminalRuleCall_3_3_0_1; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_3_4() { return cRightParenthesisSemicolonKeyword_3_4; }
		
		//('SUBTYPE' 'OF' '(' superType=[Entity] ');')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'SUBTYPE'
		public Keyword getSUBTYPEKeyword_4_0() { return cSUBTYPEKeyword_4_0; }
		
		//'OF'
		public Keyword getOFKeyword_4_1() { return cOFKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//superType=[Entity]
		public Assignment getSuperTypeAssignment_4_3() { return cSuperTypeAssignment_4_3; }
		
		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_4_3_0() { return cSuperTypeEntityCrossReference_4_3_0; }
		
		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_4_3_0_1() { return cSuperTypeEntityIDTerminalRuleCall_4_3_0_1; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_4_4() { return cRightParenthesisSemicolonKeyword_4_4; }
		
		//(attributes+=Attribute)*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'END_ENTITY;'
		public Keyword getEND_ENTITYKeyword_6() { return cEND_ENTITYKeyword_6; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeReferenceOrValueParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFullStopFullStopFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEND_FUNCTIONKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Function:
		//    'FUNCTION' name=ID '(' (parameters=ParameterList)? ')' (':' (returnType=ReferenceOrValue)) ';'
		//    '...'
		//    'END_FUNCTION;';
		@Override public ParserRule getRule() { return rule; }
		
		//'FUNCTION' name=ID '(' (parameters=ParameterList)? ')' (':' (returnType=ReferenceOrValue)) ';'
		//'...'
		//'END_FUNCTION;'
		public Group getGroup() { return cGroup; }
		
		//'FUNCTION'
		public Keyword getFUNCTIONKeyword_0() { return cFUNCTIONKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_3_0() { return cParametersParameterListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' (returnType=ReferenceOrValue))
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//(returnType=ReferenceOrValue)
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }
		
		//ReferenceOrValue
		public RuleCall getReturnTypeReferenceOrValueParserRuleCall_5_1_0() { return cReturnTypeReferenceOrValueParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_7() { return cFullStopFullStopFullStopKeyword_7; }
		
		//'END_FUNCTION;'
		public Keyword getEND_FUNCTIONKeyword_8() { return cEND_FUNCTIONKeyword_8; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//    parameters+=Parameter (';' parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Parameter (';' parameters+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }
		
		//(';' parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeReferenceOrValueParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' (type=ReferenceOrValue);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (type=ReferenceOrValue)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(type=ReferenceOrValue)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ReferenceOrValue
		public RuleCall getTypeReferenceOrValueParserRuleCall_2_0() { return cTypeReferenceOrValueParserRuleCall_2_0; }
	}
	public class UserDefinedTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.UserDefinedTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cElementsUserDefinedTypeCrossReference_0_0 = (CrossReference)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsUserDefinedTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cElementsUserDefinedTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cElementsUserDefinedTypeCrossReference_1_1_0 = (CrossReference)cElementsAssignment_1_1.eContents().get(0);
		private final RuleCall cElementsUserDefinedTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cElementsUserDefinedTypeCrossReference_1_1_0.eContents().get(1);
		
		//UserDefinedTypeList:
		//    (elements+=[UserDefinedType]) (',' (elements+=[UserDefinedType]))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(elements+=[UserDefinedType]) (',' (elements+=[UserDefinedType]))*
		public Group getGroup() { return cGroup; }
		
		//(elements+=[UserDefinedType])
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//[UserDefinedType]
		public CrossReference getElementsUserDefinedTypeCrossReference_0_0() { return cElementsUserDefinedTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getElementsUserDefinedTypeIDTerminalRuleCall_0_0_1() { return cElementsUserDefinedTypeIDTerminalRuleCall_0_0_1; }
		
		//(',' (elements+=[UserDefinedType]))*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//(elements+=[UserDefinedType])
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//[UserDefinedType]
		public CrossReference getElementsUserDefinedTypeCrossReference_1_1_0() { return cElementsUserDefinedTypeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getElementsUserDefinedTypeIDTerminalRuleCall_1_1_0_1() { return cElementsUserDefinedTypeIDTerminalRuleCall_1_1_0_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReferenceAttributeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Attribute:
		//    IntegerAttribute | StringAttribute | RealAttribute | BooleanAttribute | ReferenceAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerAttribute | StringAttribute | RealAttribute | BooleanAttribute | ReferenceAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerAttribute
		public RuleCall getIntegerAttributeParserRuleCall_0() { return cIntegerAttributeParserRuleCall_0; }
		
		//StringAttribute
		public RuleCall getStringAttributeParserRuleCall_1() { return cStringAttributeParserRuleCall_1; }
		
		//RealAttribute
		public RuleCall getRealAttributeParserRuleCall_2() { return cRealAttributeParserRuleCall_2; }
		
		//BooleanAttribute
		public RuleCall getBooleanAttributeParserRuleCall_3() { return cBooleanAttributeParserRuleCall_3; }
		
		//ReferenceAttribute
		public RuleCall getReferenceAttributeParserRuleCall_4() { return cReferenceAttributeParserRuleCall_4; }
	}
	public class IntegerAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.IntegerAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOPTIONALKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Keyword cINTEGERKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntegerAttribute:
		//    name=ID ':' (optional?='OPTIONAL')? 'INTEGER' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (optional?='OPTIONAL')? 'INTEGER' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(optional?='OPTIONAL')?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//'OPTIONAL'
		public Keyword getOptionalOPTIONALKeyword_2_0() { return cOptionalOPTIONALKeyword_2_0; }
		
		//'INTEGER'
		public Keyword getINTEGERKeyword_3() { return cINTEGERKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class StringAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.StringAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOPTIONALKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Keyword cSTRINGKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringAttribute:
		//    name=ID ':' (optional?='OPTIONAL')? 'STRING' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (optional?='OPTIONAL')? 'STRING' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(optional?='OPTIONAL')?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//'OPTIONAL'
		public Keyword getOptionalOPTIONALKeyword_2_0() { return cOptionalOPTIONALKeyword_2_0; }
		
		//'STRING'
		public Keyword getSTRINGKeyword_3() { return cSTRINGKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RealAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.RealAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOPTIONALKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Keyword cREALKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RealAttribute:
		//    name=ID ':' (optional?='OPTIONAL')? 'REAL' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (optional?='OPTIONAL')? 'REAL' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(optional?='OPTIONAL')?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//'OPTIONAL'
		public Keyword getOptionalOPTIONALKeyword_2_0() { return cOptionalOPTIONALKeyword_2_0; }
		
		//'REAL'
		public Keyword getREALKeyword_3() { return cREALKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BooleanAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.BooleanAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOPTIONALKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Keyword cBOOLEANKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BooleanAttribute:
		//    name=ID ':' (optional?='OPTIONAL')? 'BOOLEAN' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (optional?='OPTIONAL')? 'BOOLEAN' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(optional?='OPTIONAL')?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//'OPTIONAL'
		public Keyword getOptionalOPTIONALKeyword_2_0() { return cOptionalOPTIONALKeyword_2_0; }
		
		//'BOOLEAN'
		public Keyword getBOOLEANKeyword_3() { return cBOOLEANKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ReferenceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.express.Express.ReferenceAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOPTIONALKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenceUserDefinedTypeCrossReference_3_0 = (CrossReference)cReferenceAssignment_3.eContents().get(0);
		private final RuleCall cReferenceUserDefinedTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cReferenceUserDefinedTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReferenceAttribute:
		//    name=ID ':' (optional?='OPTIONAL')? (reference=[UserDefinedType]) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (optional?='OPTIONAL')? (reference=[UserDefinedType]) ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(optional?='OPTIONAL')?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//'OPTIONAL'
		public Keyword getOptionalOPTIONALKeyword_2_0() { return cOptionalOPTIONALKeyword_2_0; }
		
		//(reference=[UserDefinedType])
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }
		
		//[UserDefinedType]
		public CrossReference getReferenceUserDefinedTypeCrossReference_3_0() { return cReferenceUserDefinedTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getReferenceUserDefinedTypeIDTerminalRuleCall_3_0_1() { return cReferenceUserDefinedTypeIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	
	
	private final SchemaContainerElements pSchemaContainer;
	private final SchemaElements pSchema;
	private final DeclarationElements pDeclaration;
	private final ReferenceOrValueElements pReferenceOrValue;
	private final UserDefinedTypeElements pUserDefinedType;
	private final UseFromElements pUseFrom;
	private final ImportedEntityListElements pImportedEntityList;
	private final ImportedEntityElements pImportedEntity;
	private final SelectTypeElements pSelectType;
	private final EnumerationTypeElements pEnumerationType;
	private final EnumerationValueElements pEnumerationValue;
	private final AliasTypeElements pAliasType;
	private final EntityElements pEntity;
	private final FunctionElements pFunction;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final UserDefinedTypeListElements pUserDefinedTypeList;
	private final AttributeElements pAttribute;
	private final IntegerAttributeElements pIntegerAttribute;
	private final StringAttributeElements pStringAttribute;
	private final RealAttributeElements pRealAttribute;
	private final BooleanAttributeElements pBooleanAttribute;
	private final ReferenceAttributeElements pReferenceAttribute;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSchemaContainer = new SchemaContainerElements();
		this.pSchema = new SchemaElements();
		this.pDeclaration = new DeclarationElements();
		this.pReferenceOrValue = new ReferenceOrValueElements();
		this.pUserDefinedType = new UserDefinedTypeElements();
		this.pUseFrom = new UseFromElements();
		this.pImportedEntityList = new ImportedEntityListElements();
		this.pImportedEntity = new ImportedEntityElements();
		this.pSelectType = new SelectTypeElements();
		this.pEnumerationType = new EnumerationTypeElements();
		this.pEnumerationValue = new EnumerationValueElements();
		this.pAliasType = new AliasTypeElements();
		this.pEntity = new EntityElements();
		this.pFunction = new FunctionElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.pUserDefinedTypeList = new UserDefinedTypeListElements();
		this.pAttribute = new AttributeElements();
		this.pIntegerAttribute = new IntegerAttributeElements();
		this.pStringAttribute = new StringAttributeElements();
		this.pRealAttribute = new RealAttributeElements();
		this.pBooleanAttribute = new BooleanAttributeElements();
		this.pReferenceAttribute = new ReferenceAttributeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.emoflon.express.Express".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SchemaContainer:
	//    schemas+=Schema;
	public SchemaContainerElements getSchemaContainerAccess() {
		return pSchemaContainer;
	}
	
	public ParserRule getSchemaContainerRule() {
		return getSchemaContainerAccess().getRule();
	}
	
	//Schema:
	//    'SCHEMA' name=ID ';' declarations+=Declaration* 'END_SCHEMA;';
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//Declaration:
	//    UserDefinedType | Function | UseFrom;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//ReferenceOrValue:
	//    reference=[UserDefinedType] | value=('INTEGER' | 'BOOLEAN' | 'STRING');
	public ReferenceOrValueElements getReferenceOrValueAccess() {
		return pReferenceOrValue;
	}
	
	public ParserRule getReferenceOrValueRule() {
		return getReferenceOrValueAccess().getRule();
	}
	
	//UserDefinedType:
	//    SelectType | EnumerationType | AliasType | Entity;
	public UserDefinedTypeElements getUserDefinedTypeAccess() {
		return pUserDefinedType;
	}
	
	public ParserRule getUserDefinedTypeRule() {
		return getUserDefinedTypeAccess().getRule();
	}
	
	//UseFrom:
	//    'USE' 'FROM' schema=[Schema] ('(' importedEntities=ImportedEntityList ')')?;
	public UseFromElements getUseFromAccess() {
		return pUseFrom;
	}
	
	public ParserRule getUseFromRule() {
		return getUseFromAccess().getRule();
	}
	
	//ImportedEntityList:
	//    entities+=ImportedEntity (',' entities+=ImportedEntity)*;
	public ImportedEntityListElements getImportedEntityListAccess() {
		return pImportedEntityList;
	}
	
	public ParserRule getImportedEntityListRule() {
		return getImportedEntityListAccess().getRule();
	}
	
	//ImportedEntity:
	//    entity=[Entity] ('AS' alias=ID)?;
	public ImportedEntityElements getImportedEntityAccess() {
		return pImportedEntity;
	}
	
	public ParserRule getImportedEntityRule() {
		return getImportedEntityAccess().getRule();
	}
	
	//SelectType:
	//    'TYPE' name=ID '=' 'SELECT' '(' types=UserDefinedTypeList ');' 'END_TYPE;';
	public SelectTypeElements getSelectTypeAccess() {
		return pSelectType;
	}
	
	public ParserRule getSelectTypeRule() {
		return getSelectTypeAccess().getRule();
	}
	
	//EnumerationType:
	//    'TYPE' name=ID '=' 'ENUMERATION' 'OF' '(' values+=EnumerationValue (',' values+=EnumerationValue)? ');' 'END_TYPE;';
	public EnumerationTypeElements getEnumerationTypeAccess() {
		return pEnumerationType;
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}
	
	//EnumerationValue:
	//    name=ID;
	public EnumerationValueElements getEnumerationValueAccess() {
		return pEnumerationValue;
	}
	
	public ParserRule getEnumerationValueRule() {
		return getEnumerationValueAccess().getRule();
	}
	
	//AliasType:
	//    'TYPE' name=ID '=' (element=[UserDefinedType]) ';' 'END_TYPE;';
	public AliasTypeElements getAliasTypeAccess() {
		return pAliasType;
	}
	
	public ParserRule getAliasTypeRule() {
		return getAliasTypeAccess().getRule();
	}
	
	//Entity:
	//    'ENTITY' name=ID';'
	//    ('SUPERTYPE' 'OF' '(' subType=[Entity]');')?
	//    ('SUBTYPE' 'OF' '(' superType=[Entity] ');')?
	//    (attributes+=Attribute)*
	//    'END_ENTITY;';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Function:
	//    'FUNCTION' name=ID '(' (parameters=ParameterList)? ')' (':' (returnType=ReferenceOrValue)) ';'
	//    '...'
	//    'END_FUNCTION;';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//ParameterList:
	//    parameters+=Parameter (';' parameters+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' (type=ReferenceOrValue);
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//UserDefinedTypeList:
	//    (elements+=[UserDefinedType]) (',' (elements+=[UserDefinedType]))*;
	public UserDefinedTypeListElements getUserDefinedTypeListAccess() {
		return pUserDefinedTypeList;
	}
	
	public ParserRule getUserDefinedTypeListRule() {
		return getUserDefinedTypeListAccess().getRule();
	}
	
	//Attribute:
	//    IntegerAttribute | StringAttribute | RealAttribute | BooleanAttribute | ReferenceAttribute;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//IntegerAttribute:
	//    name=ID ':' (optional?='OPTIONAL')? 'INTEGER' ';';
	public IntegerAttributeElements getIntegerAttributeAccess() {
		return pIntegerAttribute;
	}
	
	public ParserRule getIntegerAttributeRule() {
		return getIntegerAttributeAccess().getRule();
	}
	
	//StringAttribute:
	//    name=ID ':' (optional?='OPTIONAL')? 'STRING' ';';
	public StringAttributeElements getStringAttributeAccess() {
		return pStringAttribute;
	}
	
	public ParserRule getStringAttributeRule() {
		return getStringAttributeAccess().getRule();
	}
	
	//RealAttribute:
	//    name=ID ':' (optional?='OPTIONAL')? 'REAL' ';';
	public RealAttributeElements getRealAttributeAccess() {
		return pRealAttribute;
	}
	
	public ParserRule getRealAttributeRule() {
		return getRealAttributeAccess().getRule();
	}
	
	//BooleanAttribute:
	//    name=ID ':' (optional?='OPTIONAL')? 'BOOLEAN' ';';
	public BooleanAttributeElements getBooleanAttributeAccess() {
		return pBooleanAttribute;
	}
	
	public ParserRule getBooleanAttributeRule() {
		return getBooleanAttributeAccess().getRule();
	}
	
	//ReferenceAttribute:
	//    name=ID ':' (optional?='OPTIONAL')? (reference=[UserDefinedType]) ';';
	public ReferenceAttributeElements getReferenceAttributeAccess() {
		return pReferenceAttribute;
	}
	
	public ParserRule getReferenceAttributeRule() {
		return getReferenceAttributeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
