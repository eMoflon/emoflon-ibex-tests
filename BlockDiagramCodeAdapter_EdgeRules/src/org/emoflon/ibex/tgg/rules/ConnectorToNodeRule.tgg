#using BlockDiagramCodeAdapter_EdgeRules.*
#using AttrCondDefLibrary.*

#rule ConnectorToNodeRule #with BlockDiagramCodeAdapter_EdgeRules

#source {
	providerBlock:BlockDiagram.Block {
		- ports->provide
	}
	requireBlock:BlockDiagram.Block {
		- ports->require
	}
	provide:BlockDiagram.Provide{
		++ - connector->connector
	}
	system:BlockDiagram.BlockSystem {
		- blocks->providerBlock
		- blocks->requireBlock
		
	}
	++connector:Connector
	require:BlockDiagram.Require {
		++ - connector->connector
	}
}

#target {
	providerIdAttr:MocaTree.Attribute {
		name == "id"
	}
	requireNode:MocaTree.Node {
		name == "REQUIRE"
		- parentNode->requireBlockNode
	}
	providerBlockNode:MocaTree.Node {
		name == "Block"
		- attribute->providerBlockIdAttr
		- parentNode->systemNode
	}
	systemNode:MocaTree.Node
	requireBlockNode:MocaTree.Node {
		name == "Block"
		- parentNode->systemNode
	}
	provideNode:MocaTree.Node {
		name == "PROVIDE"
		- parentNode->providerBlockNode
		- attribute->providerIdAttr
	}
	++referencedBlock:MocaTree.Attribute {
		name := "block"
		index := 1
	}
	++referencedPort:MocaTree.Attribute {
		name := "port"
		index := 0
	}
	++connectorNode:MocaTree.Node {
		name := "CONNECTOR"
		++ - attribute->referencedBlock
		++ - parentNode->requireNode
		++ - attribute->referencedPort
	}
	providerBlockIdAttr:MocaTree.Attribute {
		name == "id"
	}
}

#correspondence {
	systemNodeToSystem :SystemToNode {
		#src->system
		#trg->systemNode
	}
	++ requirementToNodeSrc :RequirementToNodeSrc {
		#src->require
		#trg->connectorNode
	}
	requireBlockNodeToRequireBlock :BlockToNode {
		#src->requireBlock
		#trg->requireBlockNode
	}
	++ requirementToNodeTrg :RequirementToNodeTrg {
		#src->provide
		#trg->connectorNode
	}
	providerBlockToProviderBlockNode :BlockToNode {
		#src->providerBlock
		#trg->providerBlockNode
	}
	requireToNode :RequireToNode {
		#src->require
		#trg->requireNode
	}
	provideToProvideNode :ProvideToNode {
		#src->provide
		#trg->provideNode
	}
}

#attributeConditions {
	eq_string (referencedBlock.value, providerBlockIdAttr.value)
	eq_string (referencedPort.value, providerIdAttr.value)
}
