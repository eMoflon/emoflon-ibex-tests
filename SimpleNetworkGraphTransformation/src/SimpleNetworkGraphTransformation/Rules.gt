import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/SimpleNetwork/model/SimpleNetwork.ecore"

rule connect{
	network: Network{
		++ -connections -> connection
	}
	from: Device{
		.maxBandwidth >=calc(3)
		.maxBandwidth := calc(from.maxBandwidth -3)
		.currentConnections := calc(from.currentConnections+1)
		.otherValue := calc(-from.maxBandwidth)
		++ -connections -> connection
	}
	to: Device{
		.maxBandwidth >= calc(3)
		.maxBandwidth := calc(to.maxBandwidth -3)
		.currentConnections := calc(to.currentConnections+1)
		.otherValue := calc(-(3+to.currentConnections))
		++ -connections -> connection
	}
	++ connection: Connection{
		.bandwidth := calc(exp(-to.currentConnections))
		.flag := calc((3+to.currentConnections)%4)
		++ -devices ->from
		++ -devices ->from
	}
}

rule generateDevice{
	network: Network{
		.deviceNumber > calc(0)
		.deviceNumber := calc(network.deviceNumber -1)
		.maxBandwidth := calc(network.maxBandwidth - network.maxBandwidth/network.deviceNumber)
	}
	++ device: Device{
		.maxBandwidth := calc(network.maxBandwidth/network.deviceNumber)
		.flag := calc(network.maxBandwidth%6)
		.maxConnections := calc(ln(network.maxBandwidth))
	}
}

rule testFunctions{
	device1: Device{
		.flag:= calc(sqrt(device1.maxBandwidth))
		.otherValue := calc(abs(-device1.maxBandwidth))
		.maxBandwidth := calc(log(device1.maxConnections))
		.maxBandwidth > calc(0.0)
	}
	device2: Device{
		.flag := calc(tan(device2.maxBandwidth))
		.otherValue := calc(exp(-device2.maxConnections)) 
		.maxBandwidth > calc(0.0)
	}
}

rule testException1{
	network:Network
	++ device: Device{
		.otherValue := calc(ln(network.deviceNumber))		
	}
}
rule testException2{
	network:Network
	++ device: Device{
		.otherValue := calc(log(network.deviceNumber))		
	}
}
rule testException3{
	network:Network
	++ device: Device{
		.otherValue := calc(sqrt(-network.maxBandwidth))		
	}
}
rule testException4{
	network:Network
	++ device: Device{
		.otherValue := calc(100.0/network.deviceNumber)		
	}
}

pattern testConstraint1{
	device1: Device{
		.maxBandwidth <= calc(device2.maxBandwidth)
	}
	device2: Device
}

pattern testConstraint2{
	device1: Device{
		.maxBandwidth != calc(device2.maxBandwidth/device2.currentConnections+1)
	}
	device2: Device
}

pattern testConstraint3{
	network : Network {
		.deviceNumber == calc(count(findDevice))
	}
}

rule createNetwork {
	++ network : Network
}

pattern findNetwork{
	network : Network
}

rule setNumberOfDevices(num : EInt){
	network : Network {
		.deviceNumber := param::num
	}
}

rule findAndsetNumberOfDevices(){
	network : Network {
		.deviceNumber := calc(count(findDevice))
	}
}

rule insertDevicesIntoNetwork() {
	network : Network {
		++ -devices->device
	}
	
	device : Device
} when deviceNotInNetwork

condition deviceNotInNetwork = forbid findDevice

pattern findDevice{
	network : Network {
		-devices->device
	}
	
	device : Device
}
