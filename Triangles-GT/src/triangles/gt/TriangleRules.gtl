package triangles.gt
import "platform:/resource/Triangles/model/Triangles.ecore"

pattern a2b {
	[=] a : A_Class {
		[=] -b-> b
	}
	
	[=] b : B_Class {
		[=] -a->a
	}
};

pattern a2c {
	[=] a : A_Class {
		[=] -c-> c
	}
	
	[=] c : C_Class {
		[=] -a->a
	}
};

pattern b2c {
	[=] b : B_Class {
		[=] -c-> c
	}
	
	[=] c : C_Class {
		[=] -b->b
	}
};

rule connectA2B {
	[=] a : A_Class {
		[+] -b-> b
	}
	
	[=] b : B_Class {
		[+] -a->a
	}
	forbid(a2b)[a=a, b=b]
};

rule connectA2BOrdered {
	[=] a : A_Class {	
		[+] -b->b
	}
	[#]  a.id <= b.id;
	
	[=] b : B_Class {
		[+] -a->a
	}
	forbid(a2b)[a=a, b=b]
};

rule connectA2COrdered {
	[=] a : A_Class {
		[+] -c-> c
	}
	[#]  a.id <= c.id;
	
	[=] c : C_Class {
		[+] -a->a
	}
	forbid(a2c)[a=a, c=c]
};

rule connectA2C {
	[=] a : A_Class {
		[+] -c-> c
	}
	
	[=] c : C_Class {
		[+]  -a->a
	}
	forbid(a2c)[a=a, c=c]
};

rule connectB2COrdered {
	[=] b : B_Class {
		[+]  -c-> c
	}
	
	[#]  b.id <= c.id ;
	
	[=] c : C_Class {
		[+]  -b->b
	}
	forbid(b2c)[b=b, c=c]
};

rule connectB2C {
	[=] b : B_Class {
		[+]  -c-> c
	}
	
	[=] c : C_Class {
		[+]  -b->b
	}
	forbid(b2c)[b=b, c=c]
};

rule connectABCIncrementalOrdered {
	[=] a : A_Class {
		[=] -b-> b
		[=] -c-> c
	}
	[#]  a.id <= b.id;
	[#]  a.id <= c.id;
	 
	[=] b : B_Class {
		[=] -a->a
		[+]  -c->c
	}
	[#]  b.id <= c.id;
	
	[=] c : C_Class {
		[=] -a->a
		[+]  -b->b
	}
	forbid(b2c)[b=b, c=c]
};

rule connectABCIncremental {
	[=] a : A_Class {
		[=] -b-> b
		[=] -c-> c
	}
	
	[=] b : B_Class {
		[=] -a->a
		[+]  -c->c
	}
	
	[=] c : C_Class {
		[=] -a->a
		[+]  -b->b
	}
	forbid(b2c)[b=b, c=c]
};

rule connectABCFullOrdered {
	[=] a : A_Class {	
		[+]  -b-> b
		[+]  -c-> c
	}
	[#]  a.id <= b.id;
	[#]  a.id <= c.id;
	
	[=] b : B_Class {
		[+]  -a->a
		[+]  -c->c
	}
	[#]  b.id <= c.id;
	
	[=] c : C_Class {
		[+]  -a->a
		[+]  -b->b
	}
	forbid(a2b)[a=a, b=b]
	forbid(a2c)[a=a, c=c]
	forbid(b2c)[b=b, c=c]
};

rule connectABCFull {
	[=] a : A_Class {
		[+]  -b-> b
		[+]  -c-> c
	}
	
	[=] b : B_Class {
		[+]  -a->a
		[+]  -c->c
	}
	
	[=] c : C_Class {
		[+]  -a->a
		[+]  -b->b
	}
	forbid(a2b)[a=a, b=b]
	forbid(a2c)[a=a, c=c]
	forbid(b2c)[b=b, c=c]
};

rule deleteAB refines simpleTriangle1 {
	@refines= simpleTriangle1.b
	[=] b : B_Class {
		[-]  -a->a
	}
};

rule deleteAC refines simpleTriangle1 {
	@refines= simpleTriangle1.c
	[=] c : C_Class {
		[-]  -a->a
	}
};

rule deleteBC refines simpleTriangle1 {
	@refines= simpleTriangle1.c
	[=] c : C_Class {
		[-]  -b->b
	}
};

rule connectDA refines simpleTriangle2{
	[=] d : D_Class {
		[+]  -a->a
	}
	
	@refines= simpleTriangle2.a
	[=] a : A_Class
	
	forbid(dToAReference)[a=a, d=d]
};

rule deleteDA{
	[=] d : D_Class {
		[-]  -a->a
	}
	
	[=] a : A_Class
	
	enforce(simpleTriangle1)[a=a]
};

rule connectEB refines simpleTriangle2{
	[=] e1 : E_Class {
		[+]  -b->b
	}
	
	forbid(bToEReference)[b=b, e1=e1]
};

rule deleteEB refines simpleTriangle2{
	[=] e1 : E_Class {
		[-]  -b->b
	}
	
	forbid(bToEReference)[b=b, e1=e1]
};

