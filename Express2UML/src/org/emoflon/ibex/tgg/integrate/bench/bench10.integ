package Express2UML.integrate.bench

import Express2UML

skippedSpecification1: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification2: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification3: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification4: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification5: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification6: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification7: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification8: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

skippedSpecification9: solve {
	var schemasCreated1 = src | created | type Schema | exists
	var schemasCreated2 = src | created | type Schema | exists
	var schemasCreated3 = src | created | type Schema | exists
	var schemasCreated4 = src | created | type Schema | exists
	var schemasCreated5 = src | created | type Schema | exists
	var schemasCreated6 = src | created | type Schema | exists
	var schemasCreated7 = src | created | type Schema | exists
	var schemasCreated8 = src | created | type Schema | exists
	var schemasCreated9 = src | created | type Schema | exists
	var schemasCreated10 = src | created | type Schema | exists
	
	satisfies {
		schemasCreated1 and schemasCreated2 and 
		schemasCreated3 and schemasCreated4 and 
		schemasCreated5 and schemasCreated6 and 
		schemasCreated7 and schemasCreated8 and 
		schemasCreated9 and schemasCreated10
	}
	
} with mergeAndPreserve

chosenSpecification: solve {
	var schemasDeleted1 = src | deleted | type Schema | exists
	var clazzesCreated1 = trg | created | type Clazz | count
	var schemasDeleted2 = src | deleted | type Schema | exists
	var clazzesCreated2 = trg | created | type Clazz | count
	var schemasDeleted3 = src | deleted | type Schema | exists
	var clazzesCreated3 = trg | created | type Clazz | count
	var schemasDeleted4 = src | deleted | type Schema | exists
	var clazzesCreated4 = trg | created | type Clazz | count
	var schemasDeleted5 = src | deleted | type Schema | exists
	var clazzesCreated5 = trg | created | type Clazz | count
	
	satisfies {
		schemasDeleted1 and clazzesCreated1 > 0 and
		schemasDeleted2 and clazzesCreated2 > 0 and
		schemasDeleted3 and clazzesCreated3 > 0 and
		schemasDeleted4 and clazzesCreated4 > 0 and
		schemasDeleted5 and clazzesCreated5 > 0
	}
	
} with mergeAndPreserve